 Basic Programming Concepts (Before ReactJS)

- Variables
+ Variables declared with the "var" always have Global Scope
+ These two keywords provided Block Scope "let" & "const"
+ Variables declared with "let" can't be redeclared, but with "var" can be redeclared.

- Data types
+ Numbers:
let length = 16;
let weight = 7.5;
+ Strings:
let color = "Red";
let lastName = "Huong";
+ Booleans
let x = true;
let y = false;
+ Object:
const person = {firstName:"Bui", lastName:"Huong"};
+ Array object:
const cars = ["Vinfast", "Mazda", "BMW"];
+ Date object:
const date = new Date("2025-02-17");

- Operators
+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation
/	Division
%	Modulus (Division Remainder)
++	Increment
--	Decrement

- Conditional statements
+ var: Declares a variable
+ let: Declares a block variable
+ const: Declares a block constant
+ if: Marks a block of statements to be executed on a condition
+ switch: Marks a block of statements to be executed in different cases
+ for: Marks a block of statements to be executed in a loop
+ function: Declares a function
+ return: Exits a function
+ try: Implements error handling to a block of statements

- Loops
+ for: loops through a block of code a number of times
+ for/in: loops through the properties of an object
+ for/of: loops through the values of an iterable object
+ while: loops through a block of code while a specified condition is true
+ do/while: also loops through a block of code while a specified condition is true

- Rest and Spread Operators:
+ ES6 introduces the rest (...) and spread (...) operators. The rest operator allows us to represent an indefinite number of arguments as an array,
making it easier to work with variadic functions. The spread operator, on the other hand, allows us to spread an array into individual elements, 
making it simpler to pass arrays as arguments or concatenate arrays.

- Template Literals:
+ Template literals provide a more convenient way to work with strings in JavaScript. With template literals, you can embed expressions and variables 
directly within the string using placeholders (${expression}). This feature makes string interpolation and multiline strings much cleaner and more readable.

- Destructuring: is a powerful feature introduced in ES6 that allows you to extract values from arrays or properties from objects and assign them to variables. 
It provides a concise and convenient way to access specific values without the need for lengthy code. Here's an overview of destructuring in ES6:

+ Destructuring Arrays:
You can destructure an array by using square brackets [] and matching variable names on the left side of the assignment. The values from the array will be 
assigned to the corresponding variables.

+ Destructuring Objects:
With object destructuring, you can extract specific properties from an object and assign them to variables with matching names. The variable names are enclosed 
in curly braces {}. 

+ Destructuring Nested Objects: You can also destructure nested objects by specifying the nested structure within the destructuring pattern.

- Rest Operator:
+ The rest operator is denoted by three dots (...) followed by a parameter name. It allows you to represent an indefinite number of arguments as an array.

- Spread Operator:
+ The spread operator is also denoted by three dots (...), but it is used in a different context. It allows you to expand an array into its individual elements.